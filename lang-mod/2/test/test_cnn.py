from __future__ import print_function
from __future__ import division

import tensorflow as tf
import numpy as np
from data_reader import load_data, DataReader
from read_param_init import EMBEDDING
from model import tdnn

EMBEDDING = np.array([
 [-0.04020876, -0.04589647,  0.00793677],
 [ 0.03760753,  0.03413731, -0.01067527],
 [ 0.00799222,  0.0039931 ,  0.01654441],
 [-0.03427302, -0.01310955,  0.02258706],
 [ 0.01835312, -0.03909086,  0.04725415],
 [ 0.0025036 , -0.02406038, -0.02044987],
 [ 0.04297833,  0.00279194,  0.03238043],
 [-0.02025876, -0.0179657 , -0.03936036],
 [-0.00074947,  0.00352414, -0.02381919],
 [ 0.03299351, -0.00162511,  0.01352856],
 [ 0.04310675,  0.00617707, -0.04662617],
 [-0.01005498,  0.00885675, -0.00254586],
 [ 0.03250795, -0.04367134, -0.0116791 ],
 [-0.04569028,  0.01104799,  0.01585159],
 [ 0.0268481 ,  0.00737945, -0.00946116],
 [-0.03124694,  0.02487025,  0.03971596],
 [ 0.03792145, -0.01725978, -0.02407817],
 [-0.02003244, -0.00951287, -0.00884187],
 [ 0.01316513,  0.04699151,  0.00852467],
 [ 0.03358141,  0.04829691,  0.0272072 ],
 [-0.00243091, -0.02307724, -0.03919974],
 [ 0.0480135 , -0.00144688, -0.02563277],
 [-0.02597598,  0.0180791 , -0.03409653],
 [ 0.0370702 ,  0.03115036,  0.04093158],
 [-0.03747274, -0.04877437,  0.01241867],
 [-0.00797913,  0.00889203,  0.03531776],
 [ 0.04417486,  0.02585512,  0.0442488 ],
 [ 0.02102883, -0.00723729,  0.01269014],
 [ 0.01498469, -0.03097989, -0.00921361],
 [ 0.04569569, -0.03314942, -0.02747623],
 [ 0.00670947,  0.0469846 ,  0.01506192],
 [-0.0130407 , -0.01612713,  0.01080076],
 [-0.03228744, -0.0118084 , -0.04491826],
 [ 0.04447197, -0.03722177,  0.01440583],
 [-0.03368512,  0.01650865,  0.04841593],
 [ 0.0474678 ,  0.04903487,  0.02930588],
 [ 0.02360311,  0.01920362,  0.04889371],
 [-0.03173489,  0.004164  ,  0.03575457],
 [ 0.03728818, -0.0265135 ,  0.0295449 ],
 [ 0.03745138, -0.0125595 , -0.02958026],
 [-0.0137555 , -0.04032354, -0.04303581],
 [ 0.02996253, -0.01153379,  0.03671537],
 [-0.011293  ,  0.00767836, -0.03518059],
 [ 0.03063016, -0.04559553,  0.03217774],
 [ 0.03193897, -0.03499981,  0.03303108],
 [ 0.02886082, -0.00475057, -0.04592496],
 [-0.04590289, -0.03963085,  0.00179808],
 [-0.03074999, -0.02197887,  0.02568519],
 [-0.00450748, -0.03790166,  0.02786475],
 [-0.02376388,  0.00572333, -0.01082846],
 [ 0.01590927,  0.00220331,  0.00233858]
])
EMBEDDING[0,:] = 0.0

X = np.array([
 [[ 1,  3,  4,  5,  2,  0,  0,  0,  0,  0,  0],
  [ 1,  6,  3,  7,  8,  7,  9, 10,  4,  2,  0],
  [ 1,  6,  4,  5, 11, 12, 10, 13,  2,  0,  0]],

 [[ 1, 11,  4, 10,  2,  0,  0,  0,  0,  0,  0],
  [ 1, 10, 22,  4,  2,  0,  0,  0,  0,  0,  0],
  [ 1, 23,  9, 11, 11,  3,  5,  2,  0,  0,  0]],

 [[ 1,  9,  5,  2,  0,  0,  0,  0,  0,  0,  0],
  [ 1, 11,  9,  3,  7,  2,  0,  0,  0,  0,  0],
  [ 1, 10,  9,  2,  0,  0,  0,  0,  0,  0,  0]],

 [[ 1, 30,  2,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 1, 30,  2,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 1,  3,  7, 23,  2,  0,  0,  0,  0,  0,  0]]
], dtype=np.int32)

IE3 = np.array([
  [[ 0.03760753,  0.03413731, -0.01067527],
   [-0.03427302, -0.01310955,  0.02258706],
   [ 0.01835312, -0.03909086,  0.04725415],
   [ 0.0025036 , -0.02406038, -0.02044987],
   [ 0.00799222,  0.0039931 ,  0.01654441],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ]],

  [[ 0.03760753,  0.03413731, -0.01067527],
   [-0.01005498,  0.00885675, -0.00254586],
   [ 0.01835312, -0.03909086,  0.04725415],
   [ 0.04310675,  0.00617707, -0.04662617],
   [ 0.00799222,  0.0039931 ,  0.01654441],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ]],

  [[ 0.03760753,  0.03413731, -0.01067527],
   [ 0.03299351, -0.00162511,  0.01352856],
   [ 0.0025036 , -0.02406038, -0.02044987],
   [ 0.00799222,  0.0039931 ,  0.01654441],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ]],

  [[ 0.03760753,  0.03413731, -0.01067527],
   [ 0.00670947,  0.0469846 ,  0.01506192],
   [ 0.00799222,  0.0039931 ,  0.01654441],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ],
   [ 0.        ,  0.        ,  0.        ]]

])

KERNEL_2_W = np.array([
 [ 0.04880865, -0.01421236, -0.04523901, -0.02987533,  0.03726212,  0.04167234],
 [ 0.02948209, -0.00086976,  0.02180178,  0.00808966,  0.03339209,  0.03868399]
])

KERNEL_2_B = np.array([-0.04535408,  0.021757  ])

'''
ZZ:     (1,.,.) =
 0.01 *
  -4.2044  2.2762
  -4.7898  2.1922
  -4.7864  2.1788
  -4.3365  2.2244
  -4.5769  2.2350
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757

(2,.,.) =
 0.01 *
  -4.2996  2.2719
  -4.5891  2.2068
  -4.9041  2.2114
  -4.0629  2.2844
  -4.5769  2.2350
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757

(3,.,.) =
 0.01 *
  -4.4003  2.3339
  -4.6156  2.1452
  -4.3365  2.2244
  -4.5769  2.2350
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757

(4,.,.) =
 0.01 *
  -4.1343  2.4809
  -4.5776  2.3080
  -4.5769  2.2350
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
  -4.5354  2.1757
'''

class TestCNN(tf.test.TestCase):

    def test(self):

        batch_size = 4
        num_unroll_steps = 3
        char_vocab_size = 51
        max_word_length = 11
        char_embed_size = 3

        _, _, word_data, char_data, _ = load_data('data/', max_word_length)
        dataset = char_data['train']
        self.assertEqual(dataset.shape, (929589, max_word_length))

        reader = DataReader(word_data['train'], char_data['train'], batch_size=batch_size, num_unroll_steps=num_unroll_steps)
        for x, y in reader.iter():
            assert x.shape == (batch_size, num_unroll_steps, max_word_length)
            break

        self.assertAllClose(X, x)

        with self.test_session() as session:
            input_ = tf.placeholder(tf.int32, shape=[batch_size, num_unroll_steps, max_word_length], name="input")

            ''' First, embed characters '''
            with tf.variable_scope('Embedding'):
                char_embedding = tf.get_variable('char_embedding', [char_vocab_size, char_embed_size])

                # [batch_size x max_word_length, num_unroll_steps, char_embed_size]
                input_embedded = tf.nn.embedding_lookup(char_embedding, input_)

                input_embedded = tf.reshape(input_embedded, [-1, max_word_length, char_embed_size])

            session.run(tf.assign(char_embedding, EMBEDDING))
            ie = session.run(input_embedded, {
                input_: x
            })

            output = tdnn(input_embedded, [2], [2], scope='TDNN')

            out = session.run(output, {
                    input_embedded: ie,
                    'TDNN/kernel_2/w:0': np.reshape(np.transpose(KERNEL_2_W), [1, 2, num_unroll_steps, 2]),
                    'TDNN/kernel_2/b:0': KERNEL_2_B
            })

            out = out.reshape([batch_size, num_unroll_steps, 2])
            out = out.transpose([1, 0, 2])  # torch uses time-major order

            self.assertAllClose(out, np.array([
 [[-0.04201929,  0.02275813],
  [-0.04060676,  0.02283999],
  [-0.04333816,  0.02333505],
  [-0.04131923,  0.02480407]],

 [[-0.04124087,  0.02429205],
  [-0.04117644,  0.02419558],
  [-0.04282973,  0.02318067],
  [-0.04131923,  0.02480407]],

 [[-0.03877186,  0.0243939 ],
  [-0.04173752,  0.02552123],
  [-0.04168687,  0.02385954],
  [-0.04201929,  0.02454825]]]))

            print(out.shape)
            print(out)
            assert False
